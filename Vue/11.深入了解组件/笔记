【组件的注册】
一. 全局注册组件(component)
    1.优点:可以重复使用互补影响
    2.Vue.component("组件名",{template:"模板"})

二. 局部注册组件
    1.优点:只在new Vue中有效 在最后构建时减少javascript
    2.直接在实例中中的component属性中添加组件名
    3.如果想在 ComponentB 中使用 ComponentA
    var ComponentA = { /* ... */ } 
    var ComponentB = {
        { /* ... */ },
        components: {
            'component-a': ComponentA
        },
    }
三.模块系统中局部注册
    1.Babel 和 webpack 的模块系统   
    2.创建一个 components 目录 并将每个组件放置在其各自的文件中
    3.在一个 ComponentB.js文件夹中
        import ComponentA from './ComponentA'
        import ComponentC from './ComponentC'

        export default {
        components: {
            ComponentA,
            ComponentC
        },
        // ...
        }
    4.这样 组件ComponentA 与 组件ComponentC 都可以在ComponentB的模板中使用

四.基础组件的自动化全局注册
    1.基础组件多会导致组件里面有一个包含基础组件的列表
    import BaseButton from './BaseButton.vue'
    import BaseIcon from './BaseIcon.vue'
    import BaseInput from './BaseInput.vue'

    export default {
        components: {
            BaseButton,
            BaseIcon,
            BaseInput
        }
    }
    而只用到模板中一小部分
    <BaseInput  v-model="searchText" @keydown.enter="search" />或
    <BaseButton @click="search"> 
        <BaseIcon name="search"/>
    </BaseButton>

webpack的Vue CLI 3+  可以使用equire.context 只全局注册这些通用的基础组件
入口(src/mian.js)代码如下:
【
    全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生
】
import Vue from 'vue'
import upperFirst from 'lodash/upperFirst'
import camelCase from 'lodash/camelCase'

const requireComponent = require.context(
  // 其组件目录的相对路径
  './components',
  // 是否查询其子目录
  false,
  // 匹配基础组件文件名的正则表达式
  /Base[A-Z]\w+\.(vue|js)$/
)

requireComponent.keys().forEach(fileName => {
  // 获取组件配置
  const componentConfig = requireComponent(fileName)

  // 获取组件的 PascalCase 命名
  const componentName = upperFirst(
    camelCase(
      // 剥去文件名开头的 `./` 和结尾的扩展名
      fileName.replace(/^\.\/(.*)\.\w+$/, '$1')
    )
  )

  // 全局注册组件
  Vue.component(
    componentName,
    // 如果这个组件选项是通过 `export default` 导出的，
    // 那么就会优先使用 `.default`，
    // 否则回退到使用模块的根。
    componentConfig.default || componentConfig
  )
})

【Prop】
一.传递静态或动态Prop
    1.传入数字
    <blog-post v-bind:likes="42"></blog-post> 用 v-bind告诉Vue这是一个表达式
    <blog-post v-bind:likes="post.likes"></blog-post>    用一个变量进行动态赋值。
    2.传入布尔值
    <blog-post is-published></blog-post>    默认为true
    <blog-post v-bind:is-published="false"></blog-post>
    <blog-post v-bind:is-published="post.isPublished"></blog-post>
    3.传入数组
    <blog-post v-bind:comment-ids="[234, 266, 273]"></blog-post>
    <blog-post v-bind:comment-ids="post.commentIds"></blog-post>    
    4.传入对象
    <blog-post v-bind:author="{ name: 'Veronica', company: 'Veridian Dynamics' }"></blog-post>
    <blog-post v-bind:author="post.author"></blog-post>
二.传入一个对象的所有属性
    post: {
        id: 1,
        title: 'My Journey with Vue'
    }
<blog-post v-bind="post"></blog-post>  相当与
<blog-post v-bind:id="post.id" v-bind:title="post.title" ></blog-post>
三.单项数据流
    改变prop的情形
    1.这个 prop 用来传递一个初始值；
      这个子组件接下来希望将其作为一个本地的 prop 数据来使用。
        props: ['initialCounter'],
        data: function () {
            return {
                counter: this.initialCounter
            }
        } 
    2.这个 prop 以一种原始的值传入且需要进行转换(定义一个计算属性)
        props: ['size'],
        computed: {
            normalizedSize: function () {
                return this.size.trim().toLowerCase()
            }
        }   
四.验证
    function Person (firstName, lastName) {
        this.firstName = firstName
        this.lastName = lastName
    }
    Vue.component('blog-post', {
        props: {
            author: Person
        }
    })
    验证 author prop 的值是否是通过 new Person 创建的。
五.非prop的特性
    Bootstrap 插件使用了一个第三方的 <bootstrap-date-input> 组件，
    这个插件需要在其 <input> 上用到一个 data-date-picker 特性 如:
    <bootstrap-date-input data-date-picker="activated"></bootstrap-date-input>
    data-date-picker="activated" 特性就会自动添加到 <bootstrap-date-input> 的根元素上。
六.替换/合并已有的特性
    <input type="date" class="form-control">
    <bootstrap-date-input data-date-picker="activated" class="date-picker-theme-dark"></bootstrap-date-input>
    有俩个class名  他们会合并 class="form-control date-picker-theme-dark"
七.禁用特性继承
    inheritAttrs: false
    Vue.component('my-component', {
        inheritAttrs: false,
        // ...
    })
    
    $attrs作用是传递给组件的特性名和特性值
    {
        class: 'username-input',
        placeholder: 'Enter your username'
    }

    inheritAttrs: false 和 $attrs配合一起使用手动决定特性会被赋予那个元素
        Vue.component('base-input', {
            inheritAttrs: false,
            props: ['label', 'value'],
            template: `
                <label>
                    {{ label }}
                    <input v-bind="$attrs" v-bind:value="value"
                        v-on:input="$emit('input', $event.target.value)">
                </label>
            `
    })
    <base-input v-model="username" class="username-input" placeholder="Enter your username"></base-input>


【自定义事件】
一.自定义组件的v-model
    组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件
    单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的
    Vue.component('base-checkbox', {
        model: {
            prop: 'checked',
            event: 'change'
        },
        props: {
            checked: Boolean
        },
        template: `
            <input
            type="checkbox"
            v-bind:checked="checked"
            v-on:change="$emit('change', $event.target.checked)"
            >
        `
    })
    <base-checkbox v-model="lovingVue"></base-checkbox>
    lovingVue的值将会传入这个名为 checked 的prop 
    同时当 <base-checkbox> 触发一个 change 事件并附带一个新的值的时候，
    这个 lovingVue 的属性将会被更新。
    【注意】你仍然需要在组件的 props 选项里声明 checked 这个 prop
二.将原声事件绑定到组件
    v-on的修饰符 .native
    <base-input v-on:focus.native="onFocus"></base-input>
    当你监听<input>时组件会发生重构(系统会给input默认加一个lable)
        <label>
            {{ label }}
            <input v-bind="$attrs" v-bind:value="value" v-on:input="$emit('input', $event.target.value)">
        </label>
    这样.native监听器静默失败(不产生任何报错)

    Vue提供一个$listenenrs属性 作用里面包含了作用在这个组件上的所有监听器
    {
        focus: function (event) { /* ... */ }
        input: function (value) { /* ... */ },
    }

    Vue.component('base-input', {
        inheritAttrs: false,
        props: ['label', 'value'],
        computed: {
            inputListeners: function () {
            var vm = this
            // `Object.assign` 将所有的对象合并为一个新对象
            return Object.assign({},
                // 我们从父级添加所有的监听器
                this.$listeners,
                // 然后我们添加自定义监听器，
                // 或覆写一些监听器的行为
                {
                    // 这里确保组件配合 `v-model` 的工作
                    input: function (event) {
                    vm.$emit('input', event.target.value)
                    }
                }
            )
        }
    },
    template: `
        <label>
            {{ label }}
            <input v-bind="$attrs" v-bind:value="value" v-on="inputListeners">
        </label>
    `
    })
【.sync修饰符】
    在一个包含title prop的假设组件中，我们可以用以下方法表达对其赋新值
    this.$emit('update:title', newTitle)
    <text-document v-bind:title="doc.title" v-on:update:title="doc.title = $event"></text-document>
    可以使用 .sync一步完成
    <text-document v-bind:title.sync="doc.title"></text-document>
    【注意】带有.sync修饰符的v-bind不能和表达式一起使用,取而代之的是，你只能提供你想要绑定的属性名，类似 v-model

    一个对象同时设置多个 prop 的时候
    <text-document v-bind.sync="doc"></text-document>
    【注意】v-bind.sync=”{ title: doc.title }”，是无法正常工作的

【插槽】slot作为承载分发内容的出口
    一. <navigation-link url="/profile">
            内容/标签/html/组件
        </navigation-link>
        在组件模板需要写为 
        <a v-bind:href="url" class="nav-link">
            <slot></slot>
        </a>
        组件在渲染的时候 slot元素会替换为 内容/标签/html/组件 
    二.具名插槽(slot的特殊特性 name)    
        <div class="container">
            <header>
                <slot name="header"></slot>
            </header>
            <main>
                <slot></slot>
            </main>
            <footer>
                <slot name="footer"></slot>
            </footer>
        </div>

        在父组件上template元素上使用slot
        <base-layout>
            <template slot="header">
                <h1>Here might be a page title</h1>
            </template>
            <p>A paragraph for the main content.</p>
            <p>And another one.</p>
            <template slot="footer">
                <p>Here's some contact info</p>
            </template>
        </base-layout>

        slot可以直接用在一个普通的元素
        <base-layout>
            <h1 slot="header">Here might be a page title</h1>
            <p>A paragraph for the main content.</p>
            <p>And another one.</p>
            <p slot="footer">Here's some contact info</p>
        </base-layout>

        这俩个组件渲染结果为
        <div class="container">
            <header>
                <h1>Here might be a page title</h1>
            </header>
            <main>
                <p>A paragraph for the main content.</p>
                <p>And another one.</p>
            </main>
            <footer>
                <p>Here's some contact info</p>
            </footer>
        </div>

    三.插槽的默认内容
        <button type="submit">
            <slot>submit</slot>
        <button>
    四.编译作用域
        <navigation-link url="/profile">
            Logged in as {{ user.name }}
        </navigation-link>
        插槽可以访问跟这个模板的其它地方相同的实例属性
        但是不能访问组件上的作用域(navigation-link)
        【注意】父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。
    五.作用域插槽
        <ul>
            <li v-for="todo in todos" v-bind:key="todo.id">
                {{ todo.text }}
            </li>
        </ul> 但是希望每个独立的待办项渲染可以鞋为

         <ul>
            <li v-for="todo in todos" v-bind:key="todo.id">
                <!-- 我们为每个 todo 准备了一个插槽，-->
                <!-- 将 `todo` 对象作为一个插槽的 prop 传入。-->
                <slot v-bind:todo="todo">
                <!-- 回退的内容 -->
                {{ todo.text }}
                </slot>
            </li>
        </ul>   

        slot-scope(解构)可以接受函数定义的参数位置有效的表达式
        特性可以从子组件获取数据
        <todo-list v-bind:todos="todos">
            <!-- 将 `slotProps` 定义为插槽作用域的名字 -->
            <template slot-scope="slotProps">
                <!-- 为待办项自定义一个模板，-->
                <!-- 通过 `slotProps` 定制每个待办项。-->
                <span v-if="slotProps.todo.isComplete">✓</span>
                {{ slotProps.todo.text }}
            </template>
        </todo-list> 

【动态组件&异步组件】
    keep-alive作用是在组件之间相互切换会保持这些组件的状态
        优点:避免反复重渲染的性能问题
    一.<component v-bind:is="currentTabComponent"></component>
        会造成重新创建动态组件
    二. <keep-alive>
            <component v-bind:is="currentTabComponent"></component>
        </keep-alive>  
        可以将隐藏的组件缓存下来
        
【处理边界情况】
    一.访问元素&组件
        访问跟实例(通过$root属性进行访问)
        new Vue({
            data: {
                foo: 1
            },
            computed: {
                bar: function () { /* ... */ }
            },
            methods: {
                baz: function () { /* ... */ }
            }
        })
        子组件都可以将这个实例作为一个全局store来访问或使用
        // 获取根组件的数据
        this.$root.foo
        // 写入根组件的数据
        this.$root.foo = 2
        // 访问根组件的计算属性
        this.$root.bar
        // 调用根组件的方法
        this.$root.baz()
    二.访问父级组件实例($parent)
        var map = this.$parent.map || this.$parent.$parent.map
    三.访问一个子组件或子元素(ref) 
        1.ref可以给子组件赋予一个ID
            <base-input ref="usernameInput"></base-input>
            this.$refs.usernameInput
        2.ref可以在元素内部
            <input ref="input">
        3.通过父级组件方法
            methods: {
                // 用来从父级组件聚焦输入框
                focus: function () {
                    this.$refs.input.focus()
                }
            }
            this.$refs.usernameInput.focus()        
    【注意】
        $refs只会在组件渲染完成之后生效，并且它们不是响应的。避免在模板或计算属性中访问
    四.依赖注入 (provide和inject)
        <google-map>
            <google-map-region v-bind:shape="cityBoundaries">
                <google-map-markers v-bind:places="iceCreamShops"></google-map-markers>
            </google-map-region>
        </google-map>
        1.provide指定提供给后代组件的数据/方法
            provide:function(){
                return {
                    getMap:this.getMap
                }
            }
        2.inject用来接收指定的我们想要添加在这个实例的属性
            inject:['getMap']

    这样我们可以在任意的后代组件中访问getMap 大范围有效的 prop
        祖先组件不需要知道哪些后代组件使用它提供的属性
        后代组件不需要知道被注入的属性来自哪里
    五.程序化的事件侦听器
        $on(eventName, eventHandler) 侦听一个事件
        $once(eventName, eventHandler) 一次性侦听一个事件
        $off(eventName, eventHandler) 停止侦听一个事件
        单个输入框
        mounted: function () {
            var picker = new Pikaday({
                field: this.$refs.input,
                format: 'YYYY-MM-DD'
            })
            this.$once('hook:beforeDestroy', function () {
                picker.destroy()
            })
        }
        多个输入框
        mounted: function () {
            this.attachDatepicker('startDateInput')
            this.attachDatepicker('endDateInput')
        },
        methods: {
            attachDatepicker: function (refName) {
                var picker = new Pikaday({
                field: this.$refs[refName],
                format: 'YYYY-MM-DD'
                })
                this.$once('hook:beforeDestroy', function () {
                picker.destroy()
                })
            }
        }
    六.递归组件
        通过 name 自己的模板中调用自身
        防止无限循环 条件性的调用(布尔值 的 v-if)
            name: 'unique-name-of-my-component'
    七.组件之间的循环引用
        <p>
            <span>{{ folder.name }}</span>
            <tree-folder-contents :children="folder.children"/>
        </p>
        <ul>
            <li v-for="child in children">
                <tree-folder v-if="child.children" :folder="child"/>
                <span v-else>{{ child.name }}</span>
            </li>
        </ul>
        A 依赖 B，但是 B 又依赖 A，但是 A 又依赖 B造成死循环
        在生命周期的钩子beforeCreate时去注册它
        <tree-folder> 组件设为了一个点
        beforeCreate: function () {
            this.$options.components.TreeFolderContents = require('./tree-folder-contents.vue').default
        }












